#ifndef BOOK_MANAGEMENT_GUARD__H
#define BOOK_MANAGEMENT_GUARD__H

#include <stdio.h>

/*You can extend the structs (Book and BookArray) defined in this head file;
  However, you may not change the function prototypes.
  You are also free to add additional head files and data structures as needed.
*/
int user_indicator; //check whether user is Librarian
int creat_indicator; //check whether user creation is success or not
int addbook_indicator;  //check whether book creation is success or not
int size;
int maxid;

typedef struct _Book {
	    unsigned int id; //Book ID
		char *title; //book title
		char *authors; //comma separated list of authors
		unsigned int year; // year of publication
		unsigned int copies; //number of copies the library has
}Book;

typedef struct _BookArray {
	 Book* array; // pointer to array (or linked list) of struct Book.
	 unsigned int length; // number of elements in the (Book*) array
}BookArray;

typedef struct _U{
    char *username;
    char *password;
}User;


typedef struct list_node
{

Book data ;

struct list_node *next ;

}list_single;


typedef struct list_u
{
int idar[3];

User data ;

struct list_u *next ;

}list_user;

//saves the database of books in the specified file
//returns 0 if books were stored correctly, or an error code otherwise
int store_books(const char *filename, list_single *head);

//loads the database of books from the specified file
//the file must have been generated by a previous call to store_books()
//returns 0 if books were loaded correctly, or an error code otherwise
list_single *load_books(const char *filename);

//adds a book to the ones available to the library
//returns 0 if the book could be added, or an error code otherwise

list_single *add_book(unsigned int id, const char *title, const char *author, unsigned int year, unsigned int copies, list_single *head);

//removes a book from the library
//returns 0 if the book could be successfully removed, or an error code otherwise.
list_single *remove_book(unsigned int id, list_single *head);

//finds books with a given title.
//returns a BookArray structure, where the field "array" is a newly allocated array of books, or null if no book with the
//provided title can be found. The length of the array is also recorded in the returned structure, with 0 in case
//array is the null pointer.
BookArray *find_book_by_title (const char *title, list_single *head);

//finds books with the given authors.
//returns a BookArray structure, where the field "array" is a newly allocated array of books, or null if no book with the
//provided title can be found. The length of the array is also recorded in the returned structure, with 0 in case
//array is the null pointer.
BookArray *find_book_by_author (const char *author, list_single *head);

//finds books published in the given year.
//returns a BookArray structure, where the field "array" is a newly allocated array of books, or null if no book with the
//provided title can be found. The length of the array is also recorded in the returned structure, with 0 in case
//array is the null pointer.
BookArray *find_book_by_year (unsigned int year, list_single *head);

char *duplicate_s(const char *n);

list_user *borrow_book(unsigned int id, const char *username, list_single *head, list_user *uhead);

list_user *return_book(unsigned int id, const char *username, list_single *head, list_user *uhead);

list_user *show_userinfo(const char *username, list_single *head, list_user *uhead);

list_user *create_user(const char *username, const char *password, list_user *head);

list_user *load_users(const char *filename);

int store_users(const char *filename, list_user *head);

list_user *remove_user(const char *username, list_user *head);

list_user *login(const char *username, const char *password, list_user *head);

int pre_menu();

int main_menu_user();

int main_menu_librarian();

int sec_menu_search();






#endif
